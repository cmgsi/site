{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/charles/Desktop/foamtree-Site/src/carrotsearch/ui/settings/Group.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioSetting from \"./RadioSetting.js\";\nimport { Optional } from \"../Optional.js\";\nimport { view } from \"react-easy-state\";\nimport BooleanSetting from \"./BooleanSetting.js\";\nconst Group = view(_c = ({\n  setting,\n  get,\n  set,\n  className\n}) => /*#__PURE__*/_jsxDEV(\"section\", {\n  className: className,\n  children: [/*#__PURE__*/_jsxDEV(Optional, {\n    visible: !!setting.label,\n    content: () => /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: setting.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 58\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 7\n  }, this), setting.settings.map(s => {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: s.id,\n      children: getFactory(s)(s, get, set)\n    }, s.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 18\n    }, this);\n  })]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 5\n}, this));\n_c2 = Group;\nconst factories = {\n  \"group\": (s, get, set) => {\n    return /*#__PURE__*/_jsxDEV(Group, {\n      setting: s,\n      get: get,\n      set: set\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  },\n  \"boolean\": (s, get, set) => {\n    return /*#__PURE__*/_jsxDEV(BooleanSetting, {\n      label: s.label,\n      checked: get(s),\n      onChange: v => set(s, v)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  },\n  \"enum\": (s, get, set) => {\n    if (s.ui === \"radio\") {\n      return /*#__PURE__*/_jsxDEV(RadioSetting, {\n        label: s.label,\n        selected: get(s),\n        onChange: v => set(s, v),\n        options: s.options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }, this);\n    }\n  }\n};\n\nconst getFactory = s => {\n  const factory = factories[s.type];\n\n  if (!factory) {\n    throw new Error(`Unknown factory for setting type: ${s.type}`);\n  }\n\n  return factory;\n};\n\nGroup.propTypes = {\n  setting: PropTypes.object.isRequired,\n  get: PropTypes.func.isRequired,\n  set: PropTypes.func.isRequired\n};\nexport default Group;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Group$view\");\n$RefreshReg$(_c2, \"Group\");","map":{"version":3,"sources":["/home/charles/Desktop/foamtree-Site/src/carrotsearch/ui/settings/Group.js"],"names":["React","PropTypes","RadioSetting","Optional","view","BooleanSetting","Group","setting","get","set","className","label","settings","map","s","id","getFactory","factories","v","ui","options","factory","type","Error","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioSetting from \"./RadioSetting.js\";\nimport { Optional } from \"../Optional.js\";\nimport { view } from \"react-easy-state\";\nimport BooleanSetting from \"./BooleanSetting.js\";\n\nconst Group = view(({ setting, get, set, className }) => (\n    <section className={className}>\n      <Optional visible={!!setting.label} content={() => <h4>{setting.label}</h4>}/>\n\n      {\n        setting.settings.map(s => {\n          return <section key={s.id} id={s.id}>{getFactory(s)(s, get, set)}</section>\n        })\n      }\n    </section>\n));\n\nconst factories = {\n  \"group\": (s, get, set) => {\n    return <Group setting={s} get={get} set={set} />;\n  },\n\n  \"boolean\": (s, get, set) => {\n    return <BooleanSetting label={s.label} checked={get(s)} onChange={v => set(s, v)} />;\n  },\n\n  \"enum\": (s, get, set) => {\n    if (s.ui === \"radio\") {\n      return <RadioSetting label={s.label} selected={get(s)} onChange={v => set(s, v)} options={s.options} />;\n    }\n  }\n};\nconst getFactory = s => {\n  const factory = factories[s.type];\n  if (!factory) {\n    throw new Error(`Unknown factory for setting type: ${s.type}`);\n  }\n  return factory;\n};\n\nGroup.propTypes = {\n  setting: PropTypes.object.isRequired,\n  get: PropTypes.func.isRequired,\n  set: PropTypes.func.isRequired\n};\n\nexport default Group;"]},"metadata":{},"sourceType":"module"}