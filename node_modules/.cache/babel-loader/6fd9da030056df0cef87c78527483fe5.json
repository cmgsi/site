{"ast":null,"code":"/**\n * An abstract base client which connects the query, store and endpoint together\n *\n * Store and Query parameters are both optional and only necessary when the client will connect to SPARQL Graph Store\n * or SPARQL Query endpoints respectively\n *\n * @class\n */\nclass BaseClient {\n  /**\n   * @param {Object} init\n   * @param {Endpoint} init.endpoint object to connect to SPARQL endpoint\n   * @param {Query} [init.Query] SPARQL Query/Update executor constructor\n   * @param {Store} [init.Store] SPARQL Graph Store connector constructor\n   * @param {factory} [init.factory] RDF/JS DataFactory\n   * @param {{...(key:value)}} [init.options] any additional arguments passed to Query and Store constructors\n   */\n  constructor({\n    endpoint,\n    Query,\n    Store,\n    factory,\n    ...options\n  }) {\n    /** @member {RawQuery} */\n    this.query = Query ? new Query({\n      endpoint,\n      factory,\n      ...options\n    }) : null;\n    /** @member {StreamStore} */\n\n    this.store = Store ? new Store({\n      endpoint,\n      factory,\n      ...options\n    }) : null;\n  }\n\n}\n\nmodule.exports = BaseClient;","map":{"version":3,"sources":["/home/charles/Desktop/foamtree-Site/node_modules/sparql-http-client/BaseClient.js"],"names":["BaseClient","constructor","endpoint","Query","Store","factory","options","query","store","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAN,CAAiB;AACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,KAAnB;AAA0BC,IAAAA,OAA1B;AAAmC,OAAGC;AAAtC,GAAF,EAAmD;AAC5D;AACA,SAAKC,KAAL,GAAaJ,KAAK,GAAG,IAAIA,KAAJ,CAAU;AAAED,MAAAA,QAAF;AAAYG,MAAAA,OAAZ;AAAqB,SAAGC;AAAxB,KAAV,CAAH,GAAkD,IAApE;AACA;;AACA,SAAKE,KAAL,GAAaJ,KAAK,GAAG,IAAIA,KAAJ,CAAU;AAAEF,MAAAA,QAAF;AAAYG,MAAAA,OAAZ;AAAqB,SAAGC;AAAxB,KAAV,CAAH,GAAkD,IAApE;AACD;;AAdc;;AAiBjBG,MAAM,CAACC,OAAP,GAAiBV,UAAjB","sourcesContent":["/**\n * An abstract base client which connects the query, store and endpoint together\n *\n * Store and Query parameters are both optional and only necessary when the client will connect to SPARQL Graph Store\n * or SPARQL Query endpoints respectively\n *\n * @class\n */\nclass BaseClient {\n  /**\n   * @param {Object} init\n   * @param {Endpoint} init.endpoint object to connect to SPARQL endpoint\n   * @param {Query} [init.Query] SPARQL Query/Update executor constructor\n   * @param {Store} [init.Store] SPARQL Graph Store connector constructor\n   * @param {factory} [init.factory] RDF/JS DataFactory\n   * @param {{...(key:value)}} [init.options] any additional arguments passed to Query and Store constructors\n   */\n  constructor ({ endpoint, Query, Store, factory, ...options }) {\n    /** @member {RawQuery} */\n    this.query = Query ? new Query({ endpoint, factory, ...options }) : null\n    /** @member {StreamStore} */\n    this.store = Store ? new Store({ endpoint, factory, ...options }) : null\n  }\n}\n\nmodule.exports = BaseClient\n"]},"metadata":{},"sourceType":"script"}