{"ast":null,"code":"const SimpleClient = require('sparql-http-client/SimpleClient');\n\nvar prefix = \"PREFIX purl: <http://purl.org/dc/elements/1.1/> \\\nPREFIX w3: <http://www.w3.org/2001/vcard-rdf/3.0#> \\\nPREFIX : <http://example.org/book/> \\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \\\nPREFIX owl: <http://www.w3.org/2002/07/owl#> \\\nPREFIX dc: <http://purl.org/dc/elements/1.1/> \\\nPREFIX dcterms: <http://purl.org/dc/terms/> \\\nPREFIX foaf: <http://xmlns.com/foaf/0.1/> \\\nPREFIX sim: <http://purl.org/ontology/similarity/> \\\nPREFIX mo: <http://purl.org/ontology/mo/> \\\nPREFIX ov: <http://open.vocab.org/terms/> \\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\\nPREFIX bra: <http://www.semanticweb.org/ontologies/OrcamentoPublicoBrasileiro.owl/>\";\nvar query = prefix + \"select ?nome WHERE { ?mun a bra:Municipio . ?mun dc:title ?nome} \";\nconst endpointUrl = 'http://cassidy.gpopai.usp.br:8209/OrcamentoGovernoMunicipiosSP/query';\nconst client = new SimpleClient({\n  endpointUrl\n});\n\nconst func = async () => {\n  const response = await client.query.select(query, {\n    headers: {\n      accept: 'application/sparql-results+json'\n    }\n  });\n  let stringJson = await response.text(); // console.log(stringJson)\n\n  stringJson = JSON.parse(stringJson);\n  return print(stringJson);\n};\n\nexport function start() {\n  return func().then(v => {\n    return v;\n  });\n} // func().then(v => {\n//     console.log(v)\n//   });\n\nfunction print(stringJson) {\n  var cities = [];\n\n  for (var i = 0; stringJson.results['bindings'].length > i; i++) {\n    cities.push(stringJson.results['bindings'][i]['nome'].value);\n  } //sort\n\n\n  cities.sort(); //remove duplicates\n\n  let uniqueCities = cities.filter((c, index) => {\n    return cities.indexOf(c) === index;\n  }); //print\n\n  for (i = 0; i < uniqueCities.length; i++) {//console.log(uniqueCities[i]);\n  } // console.log(uniqueCities)\n\n\n  return uniqueCities;\n}","map":{"version":3,"sources":["/home/charles/Desktop/foamtree-Site/src/queries/TesteQuery.js"],"names":["SimpleClient","require","prefix","query","endpointUrl","client","func","response","select","headers","accept","stringJson","text","JSON","parse","print","start","then","v","cities","i","results","length","push","value","sort","uniqueCities","filter","c","index","indexOf"],"mappings":"AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AAEA,IAAIC,MAAM,GAAG;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAbA;AAgBA,IAAIC,KAAK,GAAGD,MAAM,GAAG,mEAArB;AAEA,MAAME,WAAW,GAAG,sEAApB;AAEA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAAEI,EAAAA;AAAF,CAAjB,CAAf;;AAEA,MAAME,IAAI,GAAG,YAAY;AACvB,QAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACF,KAAP,CAAaK,MAAb,CAAoBL,KAApB,EAA2B;AAChDM,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AADD;AADuC,GAA3B,CAAvB;AAKA,MAAIC,UAAU,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAvB,CANuB,CAOvB;;AACAD,EAAAA,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWH,UAAX,CAAb;AACA,SAAOI,KAAK,CAACJ,UAAD,CAAZ;AACD,CAVD;;AAYA,OAAO,SAASK,KAAT,GAAiB;AACtB,SAAOV,IAAI,GACRW,IADI,CACCC,CAAC,IAAI;AACT,WAAOA,CAAP;AAED,GAJI,CAAP;AAKD,C,CAGD;AACA;AAEA;;AAEA,SAASH,KAAT,CAAeJ,UAAf,EAA2B;AAEzB,MAAIQ,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBT,UAAU,CAACU,OAAX,CAAmB,UAAnB,EAA+BC,MAA/B,GAAwCF,CAAxD,EAA2DA,CAAC,EAA5D,EAAgE;AAC9DD,IAAAA,MAAM,CAACI,IAAP,CAAYZ,UAAU,CAACU,OAAX,CAAmB,UAAnB,EAA+BD,CAA/B,EAAkC,MAAlC,EAA0CI,KAAtD;AACD,GANwB,CAOzB;;;AACAL,EAAAA,MAAM,CAACM,IAAP,GARyB,CASzB;;AACA,MAAIC,YAAY,GAAGP,MAAM,CAACQ,MAAP,CAAc,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC7C,WAAOV,MAAM,CAACW,OAAP,CAAeF,CAAf,MAAsBC,KAA7B;AACD,GAFkB,CAAnB,CAVyB,CAazB;;AACA,OAAKT,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGM,YAAY,CAACJ,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C,CACxC;AACD,GAhBwB,CAiBzB;;;AACA,SAAOM,YAAP;AACD","sourcesContent":["\nconst SimpleClient = require('sparql-http-client/SimpleClient')\n\nvar prefix = \"PREFIX purl: <http://purl.org/dc/elements/1.1/> \\\nPREFIX w3: <http://www.w3.org/2001/vcard-rdf/3.0#> \\\nPREFIX : <http://example.org/book/> \\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \\\nPREFIX owl: <http://www.w3.org/2002/07/owl#> \\\nPREFIX dc: <http://purl.org/dc/elements/1.1/> \\\nPREFIX dcterms: <http://purl.org/dc/terms/> \\\nPREFIX foaf: <http://xmlns.com/foaf/0.1/> \\\nPREFIX sim: <http://purl.org/ontology/similarity/> \\\nPREFIX mo: <http://purl.org/ontology/mo/> \\\nPREFIX ov: <http://open.vocab.org/terms/> \\\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \\\nPREFIX bra: <http://www.semanticweb.org/ontologies/OrcamentoPublicoBrasileiro.owl/>\"\n\n\nvar query = prefix + \"select ?nome WHERE { ?mun a bra:Municipio . ?mun dc:title ?nome} \"\n\nconst endpointUrl = 'http://cassidy.gpopai.usp.br:8209/OrcamentoGovernoMunicipiosSP/query'\n\nconst client = new SimpleClient({ endpointUrl })\n\nconst func = async () => {\n  const response = await client.query.select(query, {\n    headers: {\n      accept: 'application/sparql-results+json'\n    }\n  })\n  let stringJson = await response.text()\n  // console.log(stringJson)\n  stringJson = JSON.parse(stringJson);\n  return print(stringJson)\n}\n\nexport function start() {\n  return func()\n    .then(v => {\n      return v\n\n    });\n}\n\n\n// func().then(v => {\n//     console.log(v)\n\n//   });\n\nfunction print(stringJson) {\n\n  var cities = [];\n\n  for (var i = 0; stringJson.results['bindings'].length > i; i++) {\n    cities.push(stringJson.results['bindings'][i]['nome'].value);\n  }\n  //sort\n  cities.sort();\n  //remove duplicates\n  let uniqueCities = cities.filter((c, index) => {\n    return cities.indexOf(c) === index;\n  });\n  //print\n  for (i = 0; i < uniqueCities.length; i++) {\n    //console.log(uniqueCities[i]);\n  }\n  // console.log(uniqueCities)\n  return uniqueCities;\n}"]},"metadata":{},"sourceType":"module"}