{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/charles/Desktop/foamtree-Site/src/FoamTreePanel.js\";\nimport React from 'react';\nimport { FoamTree } from \"./carrotsearch/foamtree/FoamTree.js\";\nimport { settingsStore } from \"./stores.js\";\nimport { view } from \"react-easy-state\";\n\nconst buildOptions = ({\n  stacking,\n  layout\n}) => {\n  return {\n    rolloutDuration: 0,\n    pullbackDuration: 0,\n    layout: layout,\n    stacking: stacking.split(\"-\")[0],\n    descriptionGroupType: stacking.split(\"-\")[1],\n    descriptionGroupSize: 0.01,\n    descriptionGroupMaxHeight: 0.1,\n    groupLabelVerticalPadding: 0.2,\n    groupBorderWidth: 1.0,\n    groupInsetWidth: 2.0,\n    groupSelectionOutlineWidth: 1.5,\n    groupBorderRadius: 0.1,\n    groupLabelFontFamily: \"Raleway, sans-serif\",\n    groupLabelFontWeight: \"bold\",\n    groupLabelMinFontSize: 0,\n    onGroupClick: e => {\n      if (e.group.url) {\n        window.open(e.group.url, \"_blank\");\n      }\n    },\n    groupColorDecorator: (opts, props, vars) => {\n      vars.groupColor = props.group.color;\n    },\n    groupLabelDecorator: (opts, props, vars) => {\n      if (props.group.url) {\n        vars.labelText += \"\\u00a0\\uD83D\\uDD17\";\n      }\n    },\n    titleBarDecorator: (opts, props, vars) => {\n      if (!settingsStore.showPathInTitleBar) {\n        return;\n      }\n\n      const path = [];\n      let g = props.group;\n\n      while (g) {\n        if (g.label) {\n          path.push(g.label);\n        }\n\n        g = g.parent;\n      }\n\n      path.reverse();\n      vars.titleBarText = path.join(\" ðŸ¡’ \");\n      vars.titleBarShown = true;\n    }\n  };\n};\n\nexport const forEachDescendant = (parent, cb) => {\n  if (parent && parent.groups) {\n    parent.groups.forEach(g => {\n      forEachDescendant(g, cb);\n      cb(g, parent);\n    });\n  }\n};\nconst grey = \"hsla(0, 0%, 90%, 0.8)\";\nexport const prepareDataObject = (propetyNames, dataObject, log) => {\n  const firstMatching = re => propetyNames.find(p => re.test(p));\n\n  const weightProperty = firstMatching(/weight/i);\n  const colorProperty = firstMatching(/color/i);\n  const urlProperty = firstMatching(/url/i);\n  forEachDescendant(dataObject, (group, parent) => {\n    group.parent = parent;\n\n    if (weightProperty) {\n      if (group[weightProperty]) {\n        group.weight = group[weightProperty];\n      }\n\n      parent.weight = (parent.weight || 0) + group.weight;\n    }\n\n    if (colorProperty) {\n      const color = group[colorProperty];\n      group.color = color ? color : grey;\n    }\n\n    if (urlProperty && group[urlProperty]) {\n      group.url = group[urlProperty];\n    }\n  });\n  return dataObject;\n};\nexport const FoamTreePanel = view(_c = ({\n  dataObject,\n  foamTreeRef\n}) => {\n  return /*#__PURE__*/_jsxDEV(FoamTree, {\n    dataObject: dataObject,\n    options: buildOptions(settingsStore),\n    implRef: foamTreeRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this);\n});\n_c2 = FoamTreePanel;\nFoamTreePanel.propTypes = {};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FoamTreePanel$view\");\n$RefreshReg$(_c2, \"FoamTreePanel\");","map":{"version":3,"sources":["/home/charles/Desktop/foamtree-Site/src/FoamTreePanel.js"],"names":["React","FoamTree","settingsStore","view","buildOptions","stacking","layout","rolloutDuration","pullbackDuration","split","descriptionGroupType","descriptionGroupSize","descriptionGroupMaxHeight","groupLabelVerticalPadding","groupBorderWidth","groupInsetWidth","groupSelectionOutlineWidth","groupBorderRadius","groupLabelFontFamily","groupLabelFontWeight","groupLabelMinFontSize","onGroupClick","e","group","url","window","open","groupColorDecorator","opts","props","vars","groupColor","color","groupLabelDecorator","labelText","titleBarDecorator","showPathInTitleBar","path","g","label","push","parent","reverse","titleBarText","join","titleBarShown","forEachDescendant","cb","groups","forEach","grey","prepareDataObject","propetyNames","dataObject","log","firstMatching","re","find","p","test","weightProperty","colorProperty","urlProperty","weight","FoamTreePanel","foamTreeRef","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FoamTree } from \"./carrotsearch/foamtree/FoamTree.js\";\nimport { settingsStore } from \"./stores.js\";\nimport { view } from \"react-easy-state\";\n\nconst buildOptions = ({ stacking, layout }) => {\n  return ({\n    rolloutDuration: 0,\n    pullbackDuration: 0,\n    layout: layout,\n    stacking: stacking.split(\"-\")[0],\n    descriptionGroupType: stacking.split(\"-\")[1],\n    descriptionGroupSize: 0.01,\n    descriptionGroupMaxHeight: 0.1,\n    groupLabelVerticalPadding: 0.2,\n    groupBorderWidth: 1.0,\n    groupInsetWidth: 2.0,\n    groupSelectionOutlineWidth: 1.5,\n    groupBorderRadius: 0.1,\n    groupLabelFontFamily: \"Raleway, sans-serif\",\n    groupLabelFontWeight: \"bold\",\n    groupLabelMinFontSize: 0,\n\n    onGroupClick: e => {\n      if (e.group.url) {\n        window.open(e.group.url, \"_blank\");\n      }\n    },\n\n    groupColorDecorator: (opts, props, vars) => {\n      vars.groupColor = props.group.color;\n    },\n\n    groupLabelDecorator: (opts, props, vars) => {\n      if (props.group.url) {\n        vars.labelText += \"\\u00a0\\uD83D\\uDD17\";\n      }\n    },\n\n    titleBarDecorator: (opts, props, vars) => {\n      if (!settingsStore.showPathInTitleBar) {\n        return;\n      }\n\n      const path = [];\n      let g = props.group;\n      while (g) {\n        if (g.label) {\n          path.push(g.label);\n        }\n        g = g.parent;\n      }\n      path.reverse();\n\n      vars.titleBarText = path.join(\" ðŸ¡’ \");\n      vars.titleBarShown = true;\n    }\n  });\n};\n\nexport const forEachDescendant = (parent, cb) => {\n  if (parent && parent.groups) {\n    parent.groups.forEach(g => {\n      forEachDescendant(g, cb);\n      cb(g, parent);\n    });\n  }\n};\n\nconst grey = \"hsla(0, 0%, 90%, 0.8)\";\n\nexport const prepareDataObject = (propetyNames, dataObject, log) => {\n  const firstMatching = re => propetyNames.find(p => re.test(p));\n  const weightProperty = firstMatching(/weight/i);\n  const colorProperty = firstMatching(/color/i);\n  const urlProperty = firstMatching(/url/i);\n\n  forEachDescendant(dataObject, (group, parent) => {\n    group.parent = parent;\n    if (weightProperty) {\n      if (group[weightProperty]) {\n        group.weight = group[weightProperty];\n      }\n      parent.weight = (parent.weight || 0) + group.weight;\n    }\n    if (colorProperty) {\n      const color = group[colorProperty];\n      group.color = color ? color : grey;\n    }\n    if (urlProperty && group[urlProperty]) {\n      group.url = group[urlProperty];\n    }\n  });\n  return dataObject;\n};\n\nexport const FoamTreePanel = view(({ dataObject, foamTreeRef }) => {\n  return (\n      <FoamTree dataObject={dataObject} options={buildOptions(settingsStore)} implRef={foamTreeRef} />\n  );\n});\n\nFoamTreePanel.propTypes = {};"]},"metadata":{},"sourceType":"module"}