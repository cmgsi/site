{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, getRef, isRefCallback, isRefObject } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\"; // this component is simple enough that tests would be purely tautological.\n\n/* istanbul ignore next */\n\nvar TextArea =\n/** @class */\nfunction (_super) {\n  __extends(TextArea, _super);\n\n  function TextArea() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {}; // keep our own ref so that we can measure and set the height of the component on first mount\n\n    _this.textareaRef = null;\n    _this.refHandlers = {\n      textarea: isRefObject(_this.props.inputRef) ? _this.textareaRef = _this.props.inputRef : function (ref) {\n        var _a;\n\n        _this.textareaRef = ref;\n        (_a = _this.props.inputRef) === null || _a === void 0 ? void 0 : _a(ref);\n      }\n    };\n\n    _this.handleChange = function (e) {\n      if (_this.props.growVertically) {\n        _this.setState({\n          height: e.target.scrollHeight\n        });\n      }\n\n      if (_this.props.onChange != null) {\n        _this.props.onChange(e);\n      }\n    };\n\n    return _this;\n  }\n\n  TextArea.prototype.componentDidMount = function () {\n    if (this.props.growVertically && this.textareaRef !== null) {\n      this.setState({\n        height: getRef(this.textareaRef).scrollHeight\n      });\n    }\n  };\n\n  TextArea.prototype.componentDidUpdate = function (prevProps) {\n    var inputRef = this.props.inputRef;\n\n    if (prevProps.inputRef !== inputRef) {\n      if (isRefObject(inputRef)) {\n        inputRef.current = this.textareaRef.current;\n        this.textareaRef = inputRef;\n      } else if (isRefCallback(inputRef)) {\n        inputRef(this.textareaRef);\n      }\n    }\n  };\n\n  TextArea.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        className = _b.className,\n        fill = _b.fill,\n        inputRef = _b.inputRef,\n        intent = _b.intent,\n        large = _b.large,\n        small = _b.small,\n        growVertically = _b.growVertically,\n        htmlProps = __rest(_b, [\"className\", \"fill\", \"inputRef\", \"intent\", \"large\", \"small\", \"growVertically\"]);\n\n    var rootClasses = classNames(Classes.INPUT, Classes.intentClass(intent), (_a = {}, _a[Classes.FILL] = fill, _a[Classes.LARGE] = large, _a[Classes.SMALL] = small, _a), className); // add explicit height style while preserving user-supplied styles if they exist\n\n    var _c = htmlProps.style,\n        style = _c === void 0 ? {} : _c;\n\n    if (growVertically && this.state.height != null) {\n      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n      // so we make a new one to add a property\n      style = __assign(__assign({}, style), {\n        height: this.state.height + \"px\"\n      });\n    }\n\n    return React.createElement(\"textarea\", __assign({}, htmlProps, {\n      className: rootClasses,\n      onChange: this.handleChange,\n      ref: this.refHandlers.textarea,\n      style: style\n    }));\n  };\n\n  TextArea.displayName = DISPLAYNAME_PREFIX + \".TextArea\";\n  TextArea = __decorate([polyfill], TextArea);\n  return TextArea;\n}(AbstractPureComponent2);\n\nexport { TextArea };","map":{"version":3,"sources":["../../../../src/components/forms/textArea.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { AbstractPureComponent2, Classes, getRef, isRefCallback, isRefObject, } from \"../../common\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n// this component is simple enough that tests would be purely tautological.\n/* istanbul ignore next */\nvar TextArea = /** @class */ (function (_super) {\n    __extends(TextArea, _super);\n    function TextArea() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {};\n        // keep our own ref so that we can measure and set the height of the component on first mount\n        _this.textareaRef = null;\n        _this.refHandlers = {\n            textarea: isRefObject(_this.props.inputRef)\n                ? (_this.textareaRef = _this.props.inputRef)\n                : function (ref) {\n                    var _a;\n                    _this.textareaRef = ref;\n                    (_a = _this.props.inputRef) === null || _a === void 0 ? void 0 : _a(ref);\n                },\n        };\n        _this.handleChange = function (e) {\n            if (_this.props.growVertically) {\n                _this.setState({\n                    height: e.target.scrollHeight,\n                });\n            }\n            if (_this.props.onChange != null) {\n                _this.props.onChange(e);\n            }\n        };\n        return _this;\n    }\n    TextArea.prototype.componentDidMount = function () {\n        if (this.props.growVertically && this.textareaRef !== null) {\n            this.setState({\n                height: getRef(this.textareaRef).scrollHeight,\n            });\n        }\n    };\n    TextArea.prototype.componentDidUpdate = function (prevProps) {\n        var inputRef = this.props.inputRef;\n        if (prevProps.inputRef !== inputRef) {\n            if (isRefObject(inputRef)) {\n                inputRef.current = this.textareaRef.current;\n                this.textareaRef = inputRef;\n            }\n            else if (isRefCallback(inputRef)) {\n                inputRef(this.textareaRef);\n            }\n        }\n    };\n    TextArea.prototype.render = function () {\n        var _a;\n        var _b = this.props, className = _b.className, fill = _b.fill, inputRef = _b.inputRef, intent = _b.intent, large = _b.large, small = _b.small, growVertically = _b.growVertically, htmlProps = __rest(_b, [\"className\", \"fill\", \"inputRef\", \"intent\", \"large\", \"small\", \"growVertically\"]);\n        var rootClasses = classNames(Classes.INPUT, Classes.intentClass(intent), (_a = {},\n            _a[Classes.FILL] = fill,\n            _a[Classes.LARGE] = large,\n            _a[Classes.SMALL] = small,\n            _a), className);\n        // add explicit height style while preserving user-supplied styles if they exist\n        var _c = htmlProps.style, style = _c === void 0 ? {} : _c;\n        if (growVertically && this.state.height != null) {\n            // this style object becomes non-extensible when mounted (at least in the enzyme renderer),\n            // so we make a new one to add a property\n            style = __assign(__assign({}, style), { height: this.state.height + \"px\" });\n        }\n        return (React.createElement(\"textarea\", __assign({}, htmlProps, { className: rootClasses, onChange: this.handleChange, ref: this.refHandlers.textarea, style: style })));\n    };\n    TextArea.displayName = DISPLAYNAME_PREFIX + \".TextArea\";\n    TextArea = __decorate([\n        polyfill\n    ], TextArea);\n    return TextArea;\n}(AbstractPureComponent2));\nexport { TextArea };\n//# sourceMappingURL=textArea.js.map"]},"metadata":{},"sourceType":"module"}