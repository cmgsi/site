{"ast":null,"code":"/**\n * A base query class which performs HTTP requests for the different SPARQL query forms\n */\nclass RawQuery {\n  /**\n   * @param {Object} init\n   * @param {Endpoint} init.endpoint\n   */\n  constructor({\n    endpoint\n  }) {\n    /** @member {Endpoint} */\n    this.endpoint = endpoint;\n  }\n  /**\n   * Performs an ASK query\n   * By default uses HTTP GET with query string\n   *\n   * @param {string} query SPARQL ASK query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='get']\n   * @return {Promise<Response>}\n   */\n\n\n  async ask(query, {\n    headers,\n    operation = 'get'\n  } = {}) {\n    headers = this.endpoint.mergeHeaders(headers);\n\n    if (!headers.has('accept')) {\n      headers.set('accept', 'application/sparql-results+json');\n    }\n\n    return this.endpoint[operation](query, {\n      headers\n    });\n  }\n  /**\n   * Performs a CONSTRUCT/DESCRIBE query\n   * By default uses HTTP GET with query string\n   *\n   * @param {string} query SPARQL query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='get']\n   * @return {Promise<Response>}\n   */\n\n\n  async construct(query, {\n    headers,\n    operation = 'get'\n  } = {}) {\n    headers = new this.endpoint.fetch.Headers(headers);\n\n    if (!headers.has('accept')) {\n      headers.set('accept', 'application/n-triples');\n    }\n\n    return this.endpoint[operation](query, {\n      headers\n    });\n  }\n  /**\n   * Performs a SELECT query\n   * By default uses HTTP GET with query string\n   *\n   * @param {string} query SPARQL query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='get']\n   * @return {Promise<Response>}\n   */\n\n\n  async select(query, {\n    headers,\n    operation = 'get'\n  } = {}) {\n    headers = this.endpoint.mergeHeaders(headers);\n\n    if (!headers.has('accept')) {\n      headers.set('accept', 'application/sparql-results+json');\n    }\n\n    return this.endpoint[operation](query, {\n      headers\n    });\n  }\n  /**\n   * Performs a SELECT query\n   * By default uses HTTP POST with form-encoded body\n   *\n   * @param {string} query SPARQL query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='postUrlencoded']\n   * @return {Promise<Response>}\n   */\n\n\n  async update(query, {\n    headers,\n    operation = 'postUrlencoded'\n  } = {}) {\n    headers = new this.endpoint.fetch.Headers(headers);\n\n    if (!headers.has('accept')) {\n      headers.set('accept', '*/*');\n    }\n\n    return this.endpoint[operation](query, {\n      headers,\n      update: true\n    });\n  }\n\n}\n\nmodule.exports = RawQuery;","map":{"version":3,"sources":["/home/charles/Desktop/foamtree-Site/node_modules/sparql-http-client/RawQuery.js"],"names":["RawQuery","constructor","endpoint","ask","query","headers","operation","mergeHeaders","has","set","construct","fetch","Headers","select","update","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,QAAN,CAAe;AACb;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAAE;AAAEC,IAAAA;AAAF,GAAF,EAAgB;AACzB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,QAAMC,GAAN,CAAWC,KAAX,EAAkB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAS,GAAG;AAAvB,MAAiC,EAAnD,EAAuD;AACrDD,IAAAA,OAAO,GAAG,KAAKH,QAAL,CAAcK,YAAd,CAA2BF,OAA3B,CAAV;;AAEA,QAAI,CAACA,OAAO,CAACG,GAAR,CAAY,QAAZ,CAAL,EAA4B;AAC1BH,MAAAA,OAAO,CAACI,GAAR,CAAY,QAAZ,EAAsB,iCAAtB;AACD;;AAED,WAAO,KAAKP,QAAL,CAAcI,SAAd,EAAyBF,KAAzB,EAAgC;AAAEC,MAAAA;AAAF,KAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,QAAMK,SAAN,CAAiBN,KAAjB,EAAwB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAS,GAAG;AAAvB,MAAiC,EAAzD,EAA6D;AAC3DD,IAAAA,OAAO,GAAG,IAAI,KAAKH,QAAL,CAAcS,KAAd,CAAoBC,OAAxB,CAAgCP,OAAhC,CAAV;;AAEA,QAAI,CAACA,OAAO,CAACG,GAAR,CAAY,QAAZ,CAAL,EAA4B;AAC1BH,MAAAA,OAAO,CAACI,GAAR,CAAY,QAAZ,EAAsB,uBAAtB;AACD;;AAED,WAAO,KAAKP,QAAL,CAAcI,SAAd,EAAyBF,KAAzB,EAAgC;AAAEC,MAAAA;AAAF,KAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,QAAMQ,MAAN,CAAcT,KAAd,EAAqB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAS,GAAG;AAAvB,MAAiC,EAAtD,EAA0D;AACxDD,IAAAA,OAAO,GAAG,KAAKH,QAAL,CAAcK,YAAd,CAA2BF,OAA3B,CAAV;;AAEA,QAAI,CAACA,OAAO,CAACG,GAAR,CAAY,QAAZ,CAAL,EAA4B;AAC1BH,MAAAA,OAAO,CAACI,GAAR,CAAY,QAAZ,EAAsB,iCAAtB;AACD;;AAED,WAAO,KAAKP,QAAL,CAAcI,SAAd,EAAyBF,KAAzB,EAAgC;AAAEC,MAAAA;AAAF,KAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,QAAMS,MAAN,CAAcV,KAAd,EAAqB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAS,GAAG;AAAvB,MAA4C,EAAjE,EAAqE;AACnED,IAAAA,OAAO,GAAG,IAAI,KAAKH,QAAL,CAAcS,KAAd,CAAoBC,OAAxB,CAAgCP,OAAhC,CAAV;;AAEA,QAAI,CAACA,OAAO,CAACG,GAAR,CAAY,QAAZ,CAAL,EAA4B;AAC1BH,MAAAA,OAAO,CAACI,GAAR,CAAY,QAAZ,EAAsB,KAAtB;AACD;;AAED,WAAO,KAAKP,QAAL,CAAcI,SAAd,EAAyBF,KAAzB,EAAgC;AAAEC,MAAAA,OAAF;AAAWS,MAAAA,MAAM,EAAE;AAAnB,KAAhC,CAAP;AACD;;AAxFY;;AA2FfC,MAAM,CAACC,OAAP,GAAiBhB,QAAjB","sourcesContent":["/**\n * A base query class which performs HTTP requests for the different SPARQL query forms\n */\nclass RawQuery {\n  /**\n   * @param {Object} init\n   * @param {Endpoint} init.endpoint\n   */\n  constructor ({ endpoint }) {\n    /** @member {Endpoint} */\n    this.endpoint = endpoint\n  }\n\n  /**\n   * Performs an ASK query\n   * By default uses HTTP GET with query string\n   *\n   * @param {string} query SPARQL ASK query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='get']\n   * @return {Promise<Response>}\n   */\n  async ask (query, { headers, operation = 'get' } = {}) {\n    headers = this.endpoint.mergeHeaders(headers)\n\n    if (!headers.has('accept')) {\n      headers.set('accept', 'application/sparql-results+json')\n    }\n\n    return this.endpoint[operation](query, { headers })\n  }\n\n  /**\n   * Performs a CONSTRUCT/DESCRIBE query\n   * By default uses HTTP GET with query string\n   *\n   * @param {string} query SPARQL query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='get']\n   * @return {Promise<Response>}\n   */\n  async construct (query, { headers, operation = 'get' } = {}) {\n    headers = new this.endpoint.fetch.Headers(headers)\n\n    if (!headers.has('accept')) {\n      headers.set('accept', 'application/n-triples')\n    }\n\n    return this.endpoint[operation](query, { headers })\n  }\n\n  /**\n   * Performs a SELECT query\n   * By default uses HTTP GET with query string\n   *\n   * @param {string} query SPARQL query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='get']\n   * @return {Promise<Response>}\n   */\n  async select (query, { headers, operation = 'get' } = {}) {\n    headers = this.endpoint.mergeHeaders(headers)\n\n    if (!headers.has('accept')) {\n      headers.set('accept', 'application/sparql-results+json')\n    }\n\n    return this.endpoint[operation](query, { headers })\n  }\n\n  /**\n   * Performs a SELECT query\n   * By default uses HTTP POST with form-encoded body\n   *\n   * @param {string} query SPARQL query\n   * @param {Object} [init]\n   * @param {HeadersInit} [init.headers] HTTP request headers\n   * @param {'get'|'postUrlencoded'|'postDirect'} [init.operation='postUrlencoded']\n   * @return {Promise<Response>}\n   */\n  async update (query, { headers, operation = 'postUrlencoded' } = {}) {\n    headers = new this.endpoint.fetch.Headers(headers)\n\n    if (!headers.has('accept')) {\n      headers.set('accept', '*/*')\n    }\n\n    return this.endpoint[operation](query, { headers, update: true })\n  }\n}\n\nmodule.exports = RawQuery\n"]},"metadata":{},"sourceType":"script"}