{"ast":null,"code":"const defaultFetch = require('nodeify-fetch');\n/**\n * Represents a SPARQL endpoint and exposes a low-level methods, close to the underlying HTTP interface\n *\n * It directly returns HTTP response objects\n */\n\n\nclass Endpoint {\n  /**\n   * @param {Object} init\n   * @param {string} init.endpointUrl SPARQL Query endpoint URL\n   * @param {fetch} [init.fetch=nodeify-fetch] fetch implementation\n   * @param {HeadersInit} [init.headers] HTTP headers to send with every endpoint request\n   * @param {string} [init.password] password used for basic authentication\n   * @param {string} [init.storeUrl] Graph Store URL\n   * @param {string} [init.updateUrl] SPARQL Update endpoint URL\n   * @param {string} [init.user] user used for basic authentication\n   */\n  constructor({\n    endpointUrl,\n    fetch,\n    headers,\n    password,\n    storeUrl,\n    updateUrl,\n    user\n  }) {\n    this.endpointUrl = endpointUrl;\n    this.fetch = fetch || defaultFetch;\n    this.headers = new this.fetch.Headers(headers);\n    this.storeUrl = storeUrl;\n    this.updateUrl = updateUrl;\n\n    if (typeof user === 'string' && typeof password === 'string') {\n      this.headers.set('authorization', 'Basic ' + Buffer.from(`${user}:${password}`).toString('base64'));\n    }\n  }\n  /**\n   * Sends the query as GET request with query string\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n\n\n  async get(query, {\n    headers,\n    update = false\n  } = {}) {\n    let url = null;\n\n    if (!update) {\n      url = new URL(this.endpointUrl);\n      url.searchParams.append('query', query);\n    } else {\n      url = new URL(this.updateUrl);\n      url.searchParams.append('update', query);\n    }\n\n    return this.fetch(url.toString().replace(/\\+/g, '%20'), {\n      method: 'GET',\n      headers: this.mergeHeaders(headers)\n    });\n  }\n  /**\n   * Sends the query as POST request with application/sparql-query body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n\n\n  async postDirect(query, {\n    headers,\n    update = false\n  } = {}) {\n    let url = null;\n\n    if (!update) {\n      url = new URL(this.endpointUrl);\n    } else {\n      url = new URL(this.updateUrl);\n    }\n\n    headers = this.mergeHeaders(headers);\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/sparql-query; charset=utf-8');\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body: query\n    });\n  }\n  /**\n   * Sends the query as POST request with application/x-www-form-urlencoded body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n\n\n  async postUrlencoded(query, {\n    headers,\n    update = false\n  } = {}) {\n    let url = null;\n    let body = null;\n\n    if (!update) {\n      url = new URL(this.endpointUrl);\n      body = 'query=' + encodeURIComponent(query);\n    } else {\n      url = new URL(this.updateUrl);\n      body = 'update=' + encodeURIComponent(query);\n    }\n\n    headers = this.mergeHeaders(headers);\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/x-www-form-urlencoded');\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body\n    });\n  }\n\n  mergeHeaders(args = {}) {\n    const merged = new this.fetch.Headers(); // client headers\n\n    for (const [key, value] of this.headers) {\n      merged.set(key, value);\n    } // argument headers\n\n\n    for (const [key, value] of new this.fetch.Headers(args)) {\n      merged.set(key, value);\n    }\n\n    return merged;\n  }\n\n}\n\nmodule.exports = Endpoint;","map":{"version":3,"sources":["/home/charles/Desktop/foamtree-Site/node_modules/sparql-http-client/Endpoint.js"],"names":["defaultFetch","require","Endpoint","constructor","endpointUrl","fetch","headers","password","storeUrl","updateUrl","user","Headers","set","Buffer","from","toString","get","query","update","url","URL","searchParams","append","replace","method","mergeHeaders","postDirect","has","body","postUrlencoded","encodeURIComponent","args","merged","key","value","module","exports"],"mappings":"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","sourcesContent":["const defaultFetch = require('nodeify-fetch')\n\n/**\n * Represents a SPARQL endpoint and exposes a low-level methods, close to the underlying HTTP interface\n *\n * It directly returns HTTP response objects\n */\nclass Endpoint {\n  /**\n   * @param {Object} init\n   * @param {string} init.endpointUrl SPARQL Query endpoint URL\n   * @param {fetch} [init.fetch=nodeify-fetch] fetch implementation\n   * @param {HeadersInit} [init.headers] HTTP headers to send with every endpoint request\n   * @param {string} [init.password] password used for basic authentication\n   * @param {string} [init.storeUrl] Graph Store URL\n   * @param {string} [init.updateUrl] SPARQL Update endpoint URL\n   * @param {string} [init.user] user used for basic authentication\n   */\n  constructor ({ endpointUrl, fetch, headers, password, storeUrl, updateUrl, user }) {\n    this.endpointUrl = endpointUrl\n    this.fetch = fetch || defaultFetch\n    this.headers = new this.fetch.Headers(headers)\n    this.storeUrl = storeUrl\n    this.updateUrl = updateUrl\n\n    if (typeof user === 'string' && typeof password === 'string') {\n      this.headers.set('authorization', 'Basic ' + Buffer.from(`${user}:${password}`).toString('base64'))\n    }\n  }\n\n  /**\n   * Sends the query as GET request with query string\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async get (query, { headers, update = false } = {}) {\n    let url = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n      url.searchParams.append('query', query)\n    } else {\n      url = new URL(this.updateUrl)\n      url.searchParams.append('update', query)\n    }\n\n    return this.fetch(url.toString().replace(/\\+/g, '%20'), {\n      method: 'GET',\n      headers: this.mergeHeaders(headers)\n    })\n  }\n\n  /**\n   * Sends the query as POST request with application/sparql-query body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async postDirect (query, { headers, update = false } = {}) {\n    let url = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n    } else {\n      url = new URL(this.updateUrl)\n    }\n\n    headers = this.mergeHeaders(headers)\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/sparql-query; charset=utf-8')\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body: query\n    })\n  }\n\n  /**\n   * Sends the query as POST request with application/x-www-form-urlencoded body\n   * @param {string} query SPARQL Query/Update\n   * @param {Object} options\n   * @param {HeadersInit} [options.headers] per-request HTTP headers\n   * @param {boolean} [options.update=false] if true, performs a SPARQL Update\n   * @return {Promise<Response>}\n   */\n  async postUrlencoded (query, { headers, update = false } = {}) {\n    let url = null\n    let body = null\n\n    if (!update) {\n      url = new URL(this.endpointUrl)\n      body = 'query=' + encodeURIComponent(query)\n    } else {\n      url = new URL(this.updateUrl)\n      body = 'update=' + encodeURIComponent(query)\n    }\n\n    headers = this.mergeHeaders(headers)\n\n    if (!headers.has('content-type')) {\n      headers.set('content-type', 'application/x-www-form-urlencoded')\n    }\n\n    return this.fetch(url, {\n      method: 'POST',\n      headers,\n      body\n    })\n  }\n\n  mergeHeaders (args = {}) {\n    const merged = new this.fetch.Headers()\n\n    // client headers\n    for (const [key, value] of this.headers) {\n      merged.set(key, value)\n    }\n\n    // argument headers\n    for (const [key, value] of new this.fetch.Headers(args)) {\n      merged.set(key, value)\n    }\n\n    return merged\n  }\n}\n\nmodule.exports = Endpoint\n"]},"metadata":{},"sourceType":"script"}