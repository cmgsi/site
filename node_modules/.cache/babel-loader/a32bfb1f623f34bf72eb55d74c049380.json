{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/charles/Desktop/foamtree-Site/src/carrotsearch/foamtree/FoamTree.js\";\nimport React from 'react';\nimport { Visualization } from \"../Visualization.js\";\nimport { FoamTree as CarrotSearchFoamTree } from \"@carrotsearch/foamtree\";\nimport PropTypes from 'prop-types';\nFoamTree.propTypes = {\n  options: PropTypes.object,\n  dataObject: PropTypes.object.isRequired,\n  selection: PropTypes.array\n};\nconst impl = {\n  embed: options => new CarrotSearchFoamTree(options),\n  set: (instance, ...rest) => {\n    const reloadNeeded = willChange(\"layout\") || willChange(\"stacking\") || willChange(\"descriptionGroupType\");\n    instance.set.apply(instance, rest);\n\n    if (!rest.dataObject && rest[0] !== \"dataObject\") {\n      if (reloadNeeded) {\n        const selection = instance.get(\"selection\");\n        const fadeDuration = instance.get(\"fadeDuration\");\n        instance.set({\n          dataObject: instance.get(\"dataObject\"),\n          fadeDuration: 0\n        });\n        instance.select(selection);\n        instance.set(\"fadeDuration\", fadeDuration);\n      } else {\n        instance.redraw();\n      }\n    }\n\n    function willChange(option) {\n      return instance.get(option) !== rest[0][option];\n    }\n  },\n  select: (instance, selection) => {\n    if (!selection) {\n      return;\n    }\n\n    instance.select({\n      groups: selection,\n      keepPrevious: false\n    });\n  },\n  resize: instance => instance.resize(),\n  dispose: instance => instance.dispose()\n};\nexport function FoamTree(props) {\n  return /*#__PURE__*/_jsxDEV(Visualization, {\n    impl: impl,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_c = FoamTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoamTree\");","map":{"version":3,"sources":["/home/charles/Desktop/foamtree-Site/src/carrotsearch/foamtree/FoamTree.js"],"names":["React","Visualization","FoamTree","CarrotSearchFoamTree","PropTypes","propTypes","options","object","dataObject","isRequired","selection","array","impl","embed","set","instance","rest","reloadNeeded","willChange","apply","get","fadeDuration","select","redraw","option","groups","keepPrevious","resize","dispose","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,QAAQ,IAAIC,oBAArB,QAAiD,wBAAjD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEAF,QAAQ,CAACG,SAAT,GAAqB;AACnBC,EAAAA,OAAO,EAAEF,SAAS,CAACG,MADA;AAEnBC,EAAAA,UAAU,EAAEJ,SAAS,CAACG,MAAV,CAAiBE,UAFV;AAGnBC,EAAAA,SAAS,EAAEN,SAAS,CAACO;AAHF,CAArB;AAMA,MAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAGP,OAAD,IAAa,IAAIH,oBAAJ,CAAyBG,OAAzB,CADT;AAEXQ,EAAAA,GAAG,EAAE,CAACC,QAAD,EAAW,GAAGC,IAAd,KAAuB;AAC1B,UAAMC,YAAY,GAAGC,UAAU,CAAC,QAAD,CAAV,IAAwBA,UAAU,CAAC,UAAD,CAAlC,IAAkDA,UAAU,CAAC,sBAAD,CAAjF;AAEAH,IAAAA,QAAQ,CAACD,GAAT,CAAaK,KAAb,CAAmBJ,QAAnB,EAA6BC,IAA7B;;AACA,QAAI,CAACA,IAAI,CAACR,UAAN,IAAoBQ,IAAI,CAAC,CAAD,CAAJ,KAAY,YAApC,EAAkD;AAChD,UAAIC,YAAJ,EAAkB;AAChB,cAAMP,SAAS,GAAGK,QAAQ,CAACK,GAAT,CAAa,WAAb,CAAlB;AACA,cAAMC,YAAY,GAAGN,QAAQ,CAACK,GAAT,CAAa,cAAb,CAArB;AACAL,QAAAA,QAAQ,CAACD,GAAT,CAAa;AACXN,UAAAA,UAAU,EAAEO,QAAQ,CAACK,GAAT,CAAa,YAAb,CADD;AAEXC,UAAAA,YAAY,EAAE;AAFH,SAAb;AAIAN,QAAAA,QAAQ,CAACO,MAAT,CAAgBZ,SAAhB;AACAK,QAAAA,QAAQ,CAACD,GAAT,CAAa,cAAb,EAA6BO,YAA7B;AACD,OATD,MASO;AACLN,QAAAA,QAAQ,CAACQ,MAAT;AACD;AACF;;AAED,aAASL,UAAT,CAAoBM,MAApB,EAA4B;AAC1B,aAAOT,QAAQ,CAACK,GAAT,CAAaI,MAAb,MAAyBR,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,CAAhC;AACD;AACF,GAxBU;AAyBXF,EAAAA,MAAM,EAAE,CAACP,QAAD,EAAWL,SAAX,KAAyB;AAC/B,QAAI,CAACA,SAAL,EAAgB;AACd;AACD;;AACDK,IAAAA,QAAQ,CAACO,MAAT,CAAgB;AAAEG,MAAAA,MAAM,EAAEf,SAAV;AAAqBgB,MAAAA,YAAY,EAAE;AAAnC,KAAhB;AACD,GA9BU;AA+BXC,EAAAA,MAAM,EAAGZ,QAAD,IAAcA,QAAQ,CAACY,MAAT,EA/BX;AAgCXC,EAAAA,OAAO,EAAGb,QAAD,IAAcA,QAAQ,CAACa,OAAT;AAhCZ,CAAb;AAmCA,OAAO,SAAS1B,QAAT,CAAkB2B,KAAlB,EAAyB;AAC9B,sBACE,QAAC,aAAD;AAAe,IAAA,IAAI,EAAEjB,IAArB;AAAA,OAA+BiB;AAA/B;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;KAJe3B,Q","sourcesContent":["import React from 'react';\nimport { Visualization } from \"../Visualization.js\";\nimport { FoamTree as CarrotSearchFoamTree } from \"@carrotsearch/foamtree\";\nimport PropTypes from 'prop-types';\n\nFoamTree.propTypes = {\n  options: PropTypes.object,\n  dataObject: PropTypes.object.isRequired,\n  selection: PropTypes.array\n};\n\nconst impl = {\n  embed: (options) => new CarrotSearchFoamTree(options),\n  set: (instance, ...rest) => {\n    const reloadNeeded = willChange(\"layout\") || willChange(\"stacking\") || willChange(\"descriptionGroupType\");\n\n    instance.set.apply(instance, rest);\n    if (!rest.dataObject && rest[0] !== \"dataObject\") {\n      if (reloadNeeded) {\n        const selection = instance.get(\"selection\");\n        const fadeDuration = instance.get(\"fadeDuration\");\n        instance.set({\n          dataObject: instance.get(\"dataObject\"),\n          fadeDuration: 0\n        });\n        instance.select(selection);\n        instance.set(\"fadeDuration\", fadeDuration);\n      } else {\n        instance.redraw();\n      }\n    }\n\n    function willChange(option) {\n      return instance.get(option) !== rest[0][option];\n    }\n  },\n  select: (instance, selection) => {\n    if (!selection) {\n      return;\n    }\n    instance.select({ groups: selection, keepPrevious: false });\n  },\n  resize: (instance) => instance.resize(),\n  dispose: (instance) => instance.dispose()\n};\n\nexport function FoamTree(props) {\n  return (\n    <Visualization impl={impl} {...props} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}